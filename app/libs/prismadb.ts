// import {PrismaClient} from "@prisma/PrismaClient"
import { PrismaClient } from "@prisma/client"
import { CLIENT_PUBLIC_FILES_PATH } from "next/dist/shared/lib/constants"

// GIVING A GLOBAL DEFINITION OF PRISMA SO IT
// CAN WORK THROUGH OUT OUR CODE
declare global {
    var prisma: PrismaClient | undefined
}


// WE CREATE A CONSTANT CALLED CLIENT WHICH EITHER SEARCHES FOR
// globalThis.PRISMA OR IT CREATES A NEW PRISMA CLIENT
const client = globalThis.prisma || new PrismaClient()
// IF CLAUSE WHICH CHECKS IF WE ARE IN DEVELOPMENT BY CHECKING
// WE ARE NOT IN PRODUCTION
// IF NOT IN PRODUCTION WE SET THE PRISMA CLIENT. WE SET THE globalThis.PRISMA 
// TO THE ABOVE NEWLY CREATED CLIENT UP HEERE IE CONST CLIENT
if(process.env.NODE_ENV.trim() !== 'production') globalThis.prisma = client

export default client;

// WE WRITE ABOVE CODE BECAUSE NEXT JS 13 HOT RELOAD CAN CAUSE A BUNCH OF 
// PRISMA CLIENT INSTANCES TO BE CREATED GIVING US A WARNING IN THE TERMINAL. 
// IN THIS WAY WE ASSIGN THE PRISMA CLIENT TO A GLOBALTHIS VARIABLE WHICH IS NOT
// AFFECTED BY HOTRELOAD.
// THIS IS A BEST PRACTICE FOR USING PRISMA WITH NEXT JS 13

// ELSE YOU CAN IMPORT PRISMA CLIENT EVERYWHERE IN YOUR CODE BUT ABOVE IS A CLEANER
// SOLUTION AND IT IS RECOMMENDED IN THE BEST PRACTICES FOR NEXT 13

// NEXT WE CREATE NextAuth.JS FILE
// WE USE PAGES FOLDER SINCE AS OF MARCH 27 2023 NextAuth.JS IS NOT ALLOWED TO WORK INSIDE 
// APP FOLDER. WE THEREFORE HAVE TO USE PAGES API FOLDER.
// PAGES API FOLDER WILL NOT BE DEPRECATED FOR A VERY LONG TIME BECAUSE OF THE MIGRATION 
// PERIOD THAT NEXT 13 NEEDS TO ALLOW